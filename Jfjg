"
)

# Directory containing the scripts to check
SCRIPTS_DIR="/home/maitelka/script/toCheck"

VARS_TOTAL=0
VARS_USED=0
VARS_UNUSED=0

echo "Checking variables defined in configuration files..."
echo "Searching for usage in: $SCRIPTS_DIR"
echo "---------------------------------------------------"

# Get exported variables from ALL files and store them in an associative array
declare -A VARS
VARS_RAW_COUNT=0

for file in "${VAR_FILES[@]}"; do
    if [ -f "$file" ]; then
        file_vars=$(grep -oP '^[[:space:]]*export[[:space:]]+[A-Z_][A-Z0-9_]*' "$file" | awk '{print $NF}')
        
        while read -r var_name; do
            if [[ -n "$var_name" ]]; then
                if [[ -z "${VARS["$var_name"]}" ]]; then
                    VARS["$var_name"]="$file"
                    ((VARS_TOTAL++))
                fi
                ((VARS_RAW_COUNT++))
            fi
        done <<< "$file_vars"
    else
        echo "Warning: File $file does not exist or is not accessible. It will be ignored."
    fi
done

# --- Section 1: Used variables ---
echo "## Used variables:"
echo "---------------------------------------------------"

# We build the `find` command to pass to `grep` only the files we want
FIND_COMMAND="find \"$SCRIPTS_DIR\" -type f"
for file in "${VAR_FILES[@]}"; do
    # `find` will look for files NOT matching the name of our variable files.
    # The `-not -name` part makes sure it skips them.
    file_name=$(basename "$file")
    FIND_COMMAND+=" -not -name \"$file_name\""
done

for var_name in "${!VARS[@]}"; do
    # `find` will list all files to check, then `xargs` will pass them to `grep`.
    if eval "$FIND_COMMAND" 2>/dev/null | xargs -r grep -q "$var_name" 2>/dev/null; then
        echo "✅ $var_name (found in: ${VARS[$var_name]})"
        ((VARS_USED++))
    else
        ((VARS_UNUSED++))
    fi
done

# --- Section 2: Unused variables ---
echo "---"
echo "## Unused variables:"
echo "---------------------------------------------------"

for var_name in "${!VARS[@]}"; do
    if eval "$FIND_COMMAND" 2>/dev/null | xargs -r grep -q "$var_name" 2>/dev/null; then







contenant les scripts à vérifier
SCRIPTS_DIR="/home/maitelka/script/toCheck"

VARS_TOTAL=0
VARS_USED=0
VARS_UNUSED=0

echo "Vérification des variables définies dans les fichiers de configuration..."
echo "Recherche de l'utilisation dans : $SCRIPTS_DIR"
echo "---------------------------------------------------"

# Récupération des variables exportées à partir de TOUS les fichiers
declare -A VARS
VARS_RAW_COUNT=0

for file in "${VAR_FILES[@]}"; do
    if [ -f "$file" ]; then
        file_vars=$(grep -oP '^[[:space:]]*export[[:space:]]+[A-Z_][A-Z0-9_]*' "$file" | awk '{print $NF}')
        
        while read -r var_name; do
            if [[ -n "$var_name" ]]; then
                if [[ -z "${VARS["$var_name"]}" ]]; then
                    VARS["$var_name"]="$file"
                    ((VARS_TOTAL++))
                fi
                ((VARS_RAW_COUNT++))
            fi
        done <<< "$file_vars"
    else
        echo "Avertissement: Le fichier $file n'existe pas ou n'est pas accessible. Il sera ignoré."
    fi
done

# Construire la liste d'exclusion pour grep
EXCLUDE_FILES=""
for file in "${VAR_FILES[@]}"; do
    EXCLUDE_FILES+=" --exclude=$file"
done

# --- Première section : Variables utilisées ---
echo "## Variables qui SONT utilisées :"
echo "---------------------------------------------------"
for var_name in "${!VARS[@]}"; do
    if eval grep -R -q -D skip "$EXCLUDE_FILES" "$var_name" "$SCRIPTS_DIR" 2>/dev/null; then
        echo "✅ $var_name (trouvé dans: ${VARS[$var_name]})"
        ((VARS_USED++))
    else
        ((VARS_UNUSED++))
    fi
done

# --- Deuxième section : Variables non utilisées ---
echo "---"
echo "## Variables qui NE sont PAS utilisées :"
echo "---------------------------------------------------"
for var_name in "${!VARS[@]}"; do
    if eval grep -R -q -D skip "$EXCLUDE_FILES" "$var_name" "$SCRIPTS_DIR" 2>/dev/null; then
        : # Ne fait rien, on a déjà compté
    else
        echo "∆ $var_name"
    fi
done

echo "---------------------------------------------------"
echo "### Statistiques de la vérification"
echo "Total de variables uniques      : $VARS_TOTAL"
echo "Doublons trouvés et traités    : $(( VARS_RAW_COUNT - VARS_TOTAL ))"
echo "Variables utilisées            : $VARS_USED"
echo "Variables non utilisées        : $VARS_UNUSED"
echo "---------------------------------------------------"
echo "Vérification terminée."
